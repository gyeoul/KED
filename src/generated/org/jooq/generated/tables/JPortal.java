/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.Indexes;
import org.jooq.generated.JIngress;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.records.PortalRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JPortal extends TableImpl<PortalRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ingress.portal</code>
     */
    public static final JPortal PORTAL = new JPortal();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PortalRecord> getRecordType() {
        return PortalRecord.class;
    }

    /**
     * The column <code>ingress.portal.guid</code>.
     */
    public final TableField<PortalRecord, UUID> GUID = createField(DSL.name("guid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<PortalRecord, Object> POINT = createField(DSL.name("point"), DefaultDataType.getDefaultDataType("\"pg_catalog\".\"point\""), this, "");

    /**
     * The column <code>ingress.portal.name</code>.
     */
    public final TableField<PortalRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>ingress.portal.image</code>.
     */
    public final TableField<PortalRecord, String> IMAGE = createField(DSL.name("image"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>ingress.portal.last_update</code>.
     */
    public final TableField<PortalRecord, LocalDateTime> LAST_UPDATE = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>ingress.portal.late6</code>.
     */
    public final TableField<PortalRecord, Long> LATE6 = createField(DSL.name("late6"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>ingress.portal.lnge6</code>.
     */
    public final TableField<PortalRecord, Long> LNGE6 = createField(DSL.name("lnge6"), SQLDataType.BIGINT.nullable(false), this, "");

    private JPortal(Name alias, Table<PortalRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JPortal(Name alias, Table<PortalRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ingress.portal</code> table reference
     */
    public JPortal(String alias) {
        this(DSL.name(alias), PORTAL);
    }

    /**
     * Create an aliased <code>ingress.portal</code> table reference
     */
    public JPortal(Name alias) {
        this(alias, PORTAL);
    }

    /**
     * Create a <code>ingress.portal</code> table reference
     */
    public JPortal() {
        this(DSL.name("portal"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JIngress.INGRESS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PORTAL_NAME_GIN);
    }

    @Override
    public UniqueKey<PortalRecord> getPrimaryKey() {
        return Keys.PORTAL_PK;
    }

    @Override
    public JPortal as(String alias) {
        return new JPortal(DSL.name(alias), this);
    }

    @Override
    public JPortal as(Name alias) {
        return new JPortal(alias, this);
    }

    @Override
    public JPortal as(Table<?> alias) {
        return new JPortal(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JPortal rename(String name) {
        return new JPortal(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JPortal rename(Name name) {
        return new JPortal(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JPortal rename(Table<?> name) {
        return new JPortal(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPortal where(Condition condition) {
        return new JPortal(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPortal where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPortal where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPortal where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPortal where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPortal where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPortal where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPortal where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPortal whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPortal whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
